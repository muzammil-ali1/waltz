package com.khartec.waltz.data.software_catalog;

import com.khartec.waltz.data.JooqUtilities;
import com.khartec.waltz.model.EntityKind;
import com.khartec.waltz.model.EntityReference;
import com.khartec.waltz.model.tally.ImmutableTallyPack;
import com.khartec.waltz.model.tally.TallyPack;
import org.jooq.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.khartec.waltz.schema.tables.SoftwareVersion.SOFTWARE_VERSION;
import static com.khartec.waltz.schema.tables.SoftwareVersionVulnerability.SOFTWARE_VERSION_VULNERABILITY;
import static com.khartec.waltz.schema.tables.Vulnerability.VULNERABILITY;
import static java.util.stream.Collectors.groupingBy;

@Repository
public class VulnerabilityDao {

    private static final Logger LOG = LoggerFactory.getLogger(VulnerabilityDao.class);

    private final DSLContext dsl;

    @Autowired
    public VulnerabilityDao(DSLContext dsl) {
        this.dsl = dsl;
    }


    public List<TallyPack<String>> countSeverityByVersionIdSelector(Select<Record1<Long>> selector) {
        Result<Record> records = dsl.select(VULNERABILITY.fields())
                .select(SOFTWARE_VERSION_VULNERABILITY.SOFTWARE_VERSION_ID)
                .from(VULNERABILITY)
                .innerJoin(SOFTWARE_VERSION_VULNERABILITY)
                    .on(SOFTWARE_VERSION_VULNERABILITY.VULNERABILITY_ID.eq(VULNERABILITY.ID))
                .innerJoin(SOFTWARE_VERSION)
                    .on(SOFTWARE_VERSION.ID.eq(SOFTWARE_VERSION_VULNERABILITY.SOFTWARE_VERSION_ID))
                .where(SOFTWARE_VERSION_VULNERABILITY.SOFTWARE_VERSION_ID.in(selector))
                .fetch();

        Map<Long, List<Record>> countsByVersionId = records
                .stream()
                .collect(groupingBy(r -> r.get(SOFTWARE_VERSION_VULNERABILITY.SOFTWARE_VERSION_ID)));

        List<TallyPack<String>> tallies = countsByVersionId
                .entrySet()
                .stream()
                .map(e -> ImmutableTallyPack.<String>builder()
                        .entityReference(EntityReference.mkRef(EntityKind.SOFTWARE_VERSION, e.getKey()))
                        .tallies(JooqUtilities.calculateStringTallies(e.getValue(), VULNERABILITY.SEVERITY))
                        .build())
                .collect(Collectors.toList());

        return tallies;
    }
}
